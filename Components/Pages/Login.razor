@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using BlazorAuth.Components.Middleware
@using BlazorAuth.Components.Shared
@using BlazorAuth.Data
@using Microsoft.AspNetCore.Authentication.Cookies
@using BlazorAuth.Controllers;
@inject UserService UserService
@inject NavigationManager nav
@rendermode InteractiveServer
@using System.Net;

<h1>Login</h1>
<div class="row">
    <div class="col-md-4">

        <Alert @ref="alert" />

        <section>
            <EditForm Model="Input" method="post" OnValidSubmit="OnLogin" FormName="Login">
                <DataAnnotationsValidator  />
                <hr />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Name" class="form-control" aria-required="true" />
                    <label for="text" class="form-label">Name</label>
                    <ValidationMessage For="() => Input.Name" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control"  aria-required="true" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Login</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private Alert alert;
    
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    public LoginHos logins {get; set;} = new();
    public async Task OnLogin()
    {
       @* var user = UserService.Verify(Input.Name, Input.Password);
       if(user is null)
       {
            //alert
            alert.ShowFailed("Invalid Email or Password");
            return;
       } *@

       var logins = await ServiceHelper.PostLogin(Input.Name, Input.Password);
        try 
        {
            if (logins.loginname == "no data" && logins.passweb == "no data")
            {
                // Alert for invalid credentials
                alert.ShowFailed("No Username and Password");
                nav.NavigateTo("/login");
            }
            else if (logins.passweb != null)
            {
                // Alert for OTP requirement
                alert.ShowSuccess("กรุณากรอกเลข OTP");
            }
            else if (Input.Name != logins.loginname || Input.Password != logins.passweb)
            {
                // Alert for invalid credentials
                alert.ShowFailed("Invalid Username or Password");
            }
            else
            {
                // Alert for invalid credentials if no passweb
                alert.ShowFailed("Invalid Username or Password");
            }
        }
        catch (Exception e)
        {
            // Alert for exceptions, possibly log the exception
            alert.ShowFailed("An error occurred during login");
        }


       var claims = new List<Claim>
       {
            new Claim(ClaimTypes.Name, logins.loginname),
       };

       var claimIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
       
       ClaimsPrincipal claimsPrincipal = new ClaimsPrincipal(claimIdentity);
       Guid key = Guid.NewGuid();
       AuthMiddleware.Logins[key] = claimsPrincipal;

       // check OTP 
       //nav.NavigateTo($"/login?key={key}", true);  //page refresh to path home
    }

    private sealed class InputModel
    {
        [Required]
        public string Name { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}   

   
